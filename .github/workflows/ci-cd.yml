name: CI/CD Pipeline

on:
  pull_request:
    branches: main
  push:
    branches: main
  workflow_dispatch:

jobs:
  linter:
    name: Run linter
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring exif pcntl bcmath gd
          coverage: none
          
      - name: Validate composer files
        run: |
          cd app
          composer validate --strict
        
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          cd app
          composer install --prefer-dist --no-progress
        
      - name: Run PHPStan
        run: |
          cd app
          vendor/bin/phpstan analyse src --memory-limit=2G

  tests:
    name: Run tests
    runs-on: ubuntu-24.04
    needs: linter
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring exif pcntl bcmath gd
          coverage: xdebug
          
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          cd app
          composer install --prefer-dist --no-progress
        
      - name: Run PHPUnit tests with coverage
        run: |
          cd app
          vendor/bin/phpunit --coverage-text --coverage-filter=src --coverage-php=coverage.php tests
        
      - name: Check code coverage threshold
        run: |
          cd app
          THRESHOLD=90
          total=$(xmllint --xpath 'string(//project/metrics/@statements)' coverage.xml)
          covered=$(xmllint --xpath 'string(//project/metrics/@coveredstatements)' coverage.xml)
          if [ "$total" -gt 0 ]; then
              coverage=$(echo "scale=2; $covered / $total * 100" | bc)
              echo "$coverage"
          else
              echo "Error getting coverage data!"
              exit 1
          fi
          if [ $coverage -lt $THRESHOLD ]; then
            echo "❌ Code coverage ($coverage%) is lower than minimum threshold ($THRESHOLD%)"
            exit 1
          else
            echo "✅ Code coverage ($coverage%) is greater than or equal to minimum threshold ($THRESHOLD%)"
          fi
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/coverage.xml
          retention-days: 30
        
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-24.04
    needs: [linter, tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts  
          
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/blog && git pull
            cd /opt/blog && \ 
            docker compose up -d && \
            docker compose exec --user www-data blog-app bash -c "cd /opt/app && composer install"
          EOF 